- name: Context-Free Grammar Derivation
  description:
    - Developed a command-line tool that performs step-by-step derivation of strings based on user-defined grammar productions.
    - Enabled input parsing via file or console with clear derivation output, assuming unambiguous grammars and valid strings.  
  used:
    - thing: Python

- name: Computer Architecture Simulation
  description:
    - Designed and simulated combinational and sequential circuits using VHDL, including test benches for validating logic behavior.
    - Evaluated instruction performance and system efficiency through CPI analysis, speedup computations, and execution time comparisons.
    - Conducted benchmark testing to analyze real-world CPU performance, using emulator tools and hardware specification assessments.
  used:
    - thing: VHDL
    - thing: GTKWave
    - thing: Python

- name: Networking Game
  description: 
    - Implemented real-time player interactions using Java sockets for seamless communication.
    - Designed an interactive JavaFX UI, including splash screens, game scenes, and responsive controls.
    - Engineered game state management for smooth transitions between menus and gameplay.
    - Utilized multithreading to optimize network performance and ensure responsive gameplay.
    - Structured event-driven logic for handling user input, animations, and game mechanics.
  used:
    - thing: Java
    - thing: JavaFX

- name: LOLCODE Programming Language Interpreter
  description:
    - Developed a LOLCODE interpreter with a lexical analyzer for efficient tokenization of LOLCODE syntax.
    - Built a parser that constructs an abstract syntax tree (AST) to validate and process LOLCODE programs.
    - Implemented execution logic for core LOLCODE constructs, including variable assignments, conditionals, loops, and arithmetic operations.
    - Designed a modular architecture to support future scalability, such as user-defined functions and multi-threaded execution.
    - Focused on optimizing performance while maintaining code readability and extensibility.
  used:
    - thing: Python

- name: Institute of Computer Science Clearance Approval System
  description:
    - Developed a full-stack institute clearance system using React for a dynamic frontend and a structured backend with controller-based architecture.
    - Designed modular React components (sidebar, dashboard, form, navigation bar, request, summary) for improved UI maintainability.
    - Implemented backend controllers (admin, authentication, request, students) to streamline user authentication and request processing.
  used:
    - thing: HTML
    - thing: CSS
    - thing: JavaScript
    - thing: React
    - thing: Node.js
    - thing: Express
    - thing: MongoDB

- name: Budget Planner Project
  description:
    - Developed a terminal-based expense tracker in Python with MySQL integration, allowing users to manage friends, groups, and financial transactions efficiently.
    - Implemented CRUD functionalities for expenses, friends, and groups, ensuring structured and accessible financial records.
    - Designed a logging system to track outstanding balances and monthly expenses, improving financial transparency.
    - Integrated a user authentication flow with balance tracking to personalize financial management.
  used:
    - thing: Python
    - thing: MySQL

- name: Mobile Health Monitoring System
  description:
    - Designed and implemented an admin dashboard with role-based access, enabling real-time monitoring and management of users across categorized health statuses.
    - Developed an entrance monitoring system with QR code scanning, enabling real-time logging of student entries in Firebase for enhanced security and attendance tracking.
    - Developed a health monitoring homepage with real-time Firebase integration, dynamic entry tracking, and historical log viewing.
    - Developed a real-time student log monitoring system, enabling dynamic log retrieval, detailed student insights, and seamless navigation for entrance scanning.
  used:
    - thing: Flutter
    - thing: Firebase
    - thing: Dart

- name: Blog.io Game
  description:
    - Designed an Entity superclass managing movement, collisions, and state changes, enabling seamless interactions with food and other entities, while extending it to a Player with keyboard-controlled mechanics and adaptive growth, and an Enemy with autonomous movement and dynamic collision behaviors.
    - Designed a SuperFood system using OOP, where Food increases size, Immunity provides temporary shielding, and Speed boosts movement for a limited time, enabling dynamic power-up mechanics in gameplay.
    - Designed and implemented a TileManager class to handle world map rendering, tile-based collision detection, and dynamic player-relative map drawing
  used:
    - thing: Java
    - thing: JavaFX

- name: Minesweeper Game
  description:
    - Developed adjustable board sizes (10x10, 16x16, 30x16) and an interactive UI.
    - Implemented an optimized tile reveal system for uncovering empty spaces efficiently.
    - Designed a flagging mechanism that limits placements based on remaining bombs, enhancing gameplay logic.
    - Integrated local storage to allow users to save and resume game sessions.
    - Utilized event listeners for real-time interactions, including left-click for digging, right-click for flagging, and board selection.
    - Implemented a game-over detection system that reveals bomb locations and provides clear win/loss feedback.
  used:
    - thing: HTML
    - thing: CSS
    - thing: JavaScript
